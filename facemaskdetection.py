# -*- coding: utf-8 -*-
"""FaceMaskDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2QHo5kIW53zJJNdWGeApaWFtrAUqTi-
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt

"""# New Section"""

from google.colab import drive
drive.mount('content/drive')

import os
main_dir="/content/drive/My Drive/facemask/archive/New Masks Dataset"
train_dir=os.path.join(main_dir,'Train')
test_dir=os.path.join(main_dir,'Test')
valid_dir=os.path.join(main_dir,'Validation')
train_mask_dir=os.path.join(train_dir,'Mask')
train_nomask_dir=os.path.join(train_dir,'Non Mask')

print (train_mask_dir)

train_mask_names=os.listdir(train_mask_dir)
train_nomask_names=os.listdir(train_nomask_dir)

train_datagen=ImageDataGenerator(rescale=1./255,
                                 zoom_range=0.2,
                                 rotation_range=40,
                                 horizontal_flip=True
                                 )
test_datagen=ImageDataGenerator(rescale=1./255)
valid_datagen=ImageDataGenerator(rescale=1./255)
train_datagen.flow_from_directory(train_dir,
                                  targent_size=(150,150),
                                  batch_size=32,
                                  class_mode='binary'
                                  )
test_datagen.flow_from_directory(test_dir,
                                  targent_size=(150,150),
                                  batch_size=32,
                                  class_mode='binary'
                                  )
valid_datagen.flow_from_directory(valid_dir,
                                  targent_size=(150,150),
                                  batch_size=32,
                                  class_mode='binary'
                                  )

model-Sequential()
model.add(Conv2D(32,(3,3),padding='SAME', activation='relu', input_shape=(150,150,3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.5))

model.add(Conv2D(32,(3,3),padding='SAME', activation='relu', input_shape=(150,150,3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.5))

model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1,activation='sigmoid'))
model.summary

model.compile(Adam(Ir=0.001),loss-'binary_crossentropy',metrics-['accuracy'])

history-model.fit(train_generator,
                  epochs=10,
                  validation_data=valid_generator)

test_loss, test_acc-model.evaluate(test_generator)
print('test acc: {} test oss:{}'.format(test_acc,test_loss))

import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded=files.upload()
#print(uploaded)
for f in uploaded.keys():
  img_path='/content/'+f
  img-image.load_img(img_path, target_size-(150,150))
  images=image.img_to_array(img)
  images=np.expand_dims(images,axis=0)
  prediction-mode1.predict(images)
  if prediction==0:
    print(f,'Mask is there')
    else:
      print(f,'Mask is not present')

model.save('saved_model.h5')

import cv2
from tensorflow.keras.models import load_model
from keras.preprocessing.image import load_img, img_to_array
import numpy as np

model-load_model('saved_model.h5')

img_width, img_height= 150,150

face_cascade=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

#cap=cv2.VideoCapture('videoplayback.mp4')
cap=cv2.VideoCapture(0)
img_count_full=0

font=cv2.FONT_HERSHEY_SIMPLEX
org=(1,1)
class_label=' '
fontScale=1
color=(255,0,0)
thickness=2

while True:
     img_count_full +=1
     response, color_img=cap.read()

     if response==False:
       break

    scale=50
    width=int(color_img.shape[1]*scale/100)
    height=int(color_img[0]*scale/100)
    dim=(width,height)

    color_img=cv2.resize(color_img, dim, interpolation=cv2.INTER_AREA)

    gray_img=cv2.cvtColor(color_img,cv2.COLOR_BGR2GRAY)

    faces=face_cascade.detectMultiScale(gray_img, 1.1,6)

    img_count=0
    for(x,y,w,h) in faces:
        org=(x-10,y-10)
        img_count+=1
        color_face=color_img[y:y+h,x:x+w]
        cv2.imwrite('input/%d%dface.jpg'%(img_count_full,img_count),color_face)
        img=load_img('input/%d%dface.jpg'%(img_count_full,img_count),target_size=(img_width, img_height))
        img=img_to_array(img)
        img=np.expand_dims(img,axis=0)
        prediction=model.predict(img)
        if prediction==0:
           class_labe;="Mask"
           color=(0,0,255)

        else:
          class_label="No Mask"
          color=(0,0,255)

      cv2.rectangle(color_img,(x,y),(x+w,y+h),(255,0,0),3)
      cv2.putText(color_img,class_label,org,font,fontScale, color, thickness,cv2.LINE_AA)

  cv2.imshow('Face Mask Detection', color_img)
  if cv2.waitKey(1) & 0xFF==ord('q'):
    break
    cap.release()
    cv2.destroyAllWindows()